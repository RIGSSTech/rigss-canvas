import formatMessage from "../format-message";

const shouldMergeAnchors = (elem1, elem2) => {
  if (!elem1 || !elem2 || elem1.tagName !== "A" || elem2.tagName !== "A") {
    return false;
  }

  return elem1.getAttribute("href") === elem2.getAttribute("href");
};

const notWhitespace = node => {
  return node.nodeType !== Node.TEXT_NODE || node.textContent.match(/\S/);
};

const onlyChild = parent => {
  const child = parent.firstElementChild;

  if (!child) {
    return null;
  }

  if ([...parent.childNodes].filter(notWhitespace).length > 1) {
    return null;
  }

  return child;
};

const solitaryDescendantImage = link => {
  let parent = link;
  let child = onlyChild(parent);

  while (child) {
    if (child.tagName === "IMG") {
      return child;
    }

    parent = child;
    child = onlyChild(parent);
  }

  return null;
};

const normalizeText = text => {
  // normalize whitespace and trim leading and trailing whitespace
  return text.replace(/\s+/g, " ").trim();
};

const descendantImageWithRedundantAltText = (left, right) => {
  let leftImage = solitaryDescendantImage(left);
  let rightImage = solitaryDescendantImage(right);

  if (leftImage && !rightImage && normalizeText(leftImage.getAttribute("alt")) === normalizeText(right.textContent)) {
    return leftImage;
  } else if (rightImage && !leftImage && normalizeText(rightImage.getAttribute("alt")) === normalizeText(left.textContent)) {
    return rightImage;
  } else {
    return null;
  }
};

export default {
  id: "adjacent-links",
  test: function (elem) {
    if (elem.tagName != "A") {
      return true;
    }

    return !shouldMergeAnchors(elem, elem.nextElementSibling);
  },
  data: elem => {
    return {
      combine: false
    };
  },
  form: () => [{
    label: "G\u1ED9p li\xEAn k\u1EBFt",
    checkbox: true,
    dataKey: "combine"
  }],
  update: function (elem, data) {
    const rootElem = elem.parentNode;

    if (data.combine) {
      const next = elem.nextElementSibling; // https://www.w3.org/TR/WCAG20-TECHS/H2.html

      const image = descendantImageWithRedundantAltText(elem, next);

      if (image) {
        image.setAttribute("alt", "");
      }

      rootElem.removeChild(next);
      elem.innerHTML += ` ${next.innerHTML}`;
    }

    return elem;
  },
  rootNode: function (elem) {
    return elem.parentNode;
  },
  message: () => "Li\xEAn k\u1EBFt \u0111\u1ED1i di\u1EC7n c\xF3 c\xF9ng URL ph\u1EA3i l\xE0 li\xEAn k\u1EBFt \u0111\u01A1n.",
  why: () => "B\xE0n ph\xEDm \u0111i\u1EC1u h\u01B0\u1EDBng \u0111\u1EBFn li\xEAn k\u1EBFt b\u1EB1ng c\xE1ch s\u1EED d\u1EE5ng ph\xEDm Tab. Hai li\xEAn k\u1EBFt \u0111\u1ED1i di\u1EC7n c\xF3 ch\u1EE9c n\u0103ng chuy\u1EC3n h\u01B0\u1EDBng \u0111\u1EBFn c\xF9ng \u0111i\u1EC3m \u0111\xEDch c\xF3 th\u1EC3 g\xE2y kh\xF3 hi\u1EC3u cho ng\u01B0\u1EDDi d\xF9ng b\xE0n ph\xEDm.",
  link: "https://www.w3.org/TR/WCAG20-TECHS/H2.html",
  linkText: () => "T\xECm hi\u1EC3u th\xEAm v\u1EC1 c\xE1c li\xEAn k\u1EBFt li\u1EC1n k\u1EC1"
};